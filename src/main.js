import { renderCategoryList } from "./category.js";
import { renderClipList, renderClipContent } from "./clip.js";
import {
  clipData,
  categoryOrder,
  currentCategoryId,
  toggleFavoritesOnly,
  getShowFavoritesOnly,
  setCategoryOrder,
  getCategoryOrder,
  setClipData,
  setCurrentUserId,
  uuid,
} from "./data.js";
import { db, auth, provider } from "./firebase-config.js";
import {
  signInWithPopup,
  signOut,
  onAuthStateChanged,
} from "https://www.gstatic.com/firebasejs/10.12.0/firebase-auth.js";
import {
  doc,
  getDoc,
  setDoc,
} from "https://www.gstatic.com/firebasejs/10.12.0/firebase-firestore.js";

onAuthStateChanged(auth, async (user) => {
  const logoutBtn = document.querySelector("#logout-btn");
  const app = document.querySelector(".app-container");
  const loginScreen = document.querySelector(".auth-area");
  const darkModeToggle = document.querySelector(".darkmode-toggle");

  if (user) {
    setCurrentUserId(user.uid);

    console.log("‚úÖ Î°úÍ∑∏Ïù∏Îê®:", user.uid);
    app.classList.remove("hidden");
    loginScreen.classList.add("hidden"); // ‚úÖ Î°úÍ∑∏Ïù∏ Î∞∞Í≤Ω Ïà®ÍπÄ
    logoutBtn.classList.remove("hidden"); // ‚úÖ Î°úÍ∑∏ÏïÑÏõÉ Î≤ÑÌäº ÌëúÏãú
    darkModeToggle.classList.remove("hidden"); // ‚úÖ Îã§ÌÅ¨Î™®Îìú ÌÜ†Í∏Ä ÌëúÏãú
    const userRef = doc(db, "users", user.uid);
    const snapshot = await getDoc(userRef);

    if (snapshot.exists()) {
      const data = snapshot.data();
      console.log("üì• FirestoreÏóêÏÑú ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Î°úÎìúÎê®");
      setCategoryOrder(data.categoryOrder || []);
      setClipData(data.clipData || []);
    } else {
      console.log("üÜï ÏÇ¨Ïö©Ïûê Ï≤´ Î°úÍ∑∏Ïù∏ - Îπà Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±");
      await setDoc(userRef, {
        categoryOrder: [],
        clipData: [],
      });
      setCategoryOrder([]);
      setClipData([]);
    }

    // Î†åÎçîÎßÅ ÏãúÏûë
    renderCategoryList();
    document.querySelector(".clip-list").classList.add("hidden");
    document.querySelector(".clip-content").classList.add("hidden");
  } else {
    setCurrentUserId(null);

    console.log("üö™ Î°úÍ∑∏ÏïÑÏõÉ ÏÉÅÌÉú");
    app.classList.add("hidden");
    loginScreen.classList.remove("hidden"); // ‚úÖ Î°úÍ∑∏Ïù∏ Î∞∞Í≤Ω Îã§Ïãú ÌëúÏãú
    logoutBtn.classList.add("hidden"); // ‚úÖ Î°úÍ∑∏ÏïÑÏõÉ Î≤ÑÌäº Ïà®ÍπÄ
    darkModeToggle.classList.add("hidden"); // ‚úÖ Îã§ÌÅ¨Î™®Îìú ÌÜ†Í∏Ä Ïà®ÍπÄ
  }
});
const logoutImg = document.getElementById("logout-img");
const toggleCheckbox = document.getElementById("toggle-darkmode");

function updateLogoutImage(isDark) {
  logoutImg.src = isDark
    ? "./image/logoutForDark.png"
    : "./image/logoutForBright.png";
}

toggleCheckbox.addEventListener("change", () => {
  const isDark = toggleCheckbox.checked;
  document.body.classList.toggle("dark-mode", toggleCheckbox.checked);
  localStorage.setItem("theme", toggleCheckbox.checked ? "dark" : "light");
  updateLogoutImage(isDark);
});

// ÌéòÏù¥ÏßÄ Î°úÎìúÏãú ÏÉÅÌÉú Î≥µÏõê
window.addEventListener("DOMContentLoaded", () => {
  const savedTheme = localStorage.getItem("theme");
  const isDark = savedTheme === "dark";
  document.body.classList.toggle("dark-mode", isDark);
  toggleCheckbox.checked = isDark;
  updateLogoutImage(isDark);
});

document.getElementById("login-btn").addEventListener("click", () => {
  signInWithPopup(auth, provider).catch((err) => {
    alert("Î°úÍ∑∏Ïù∏ Ïò§Î•ò: " + err.message);
  });
});

document.getElementById("logout-btn").addEventListener("click", () => {
  signOut(auth).catch((err) => {
    alert("Î°úÍ∑∏ÏïÑÏõÉ Ïò§Î•ò: " + err.message);
  });
});

// ‚úÖ ÏÉà Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÍ∞Ä
document.querySelector(".add-category").addEventListener("click", () => {
  const sidebar = document.querySelector(".sidebar");
  const clipList = document.querySelector(".clip-list");
  const clipContent = document.querySelector(".clip-content");

  if (sidebar.querySelector(".new-cat")) return;

  const div = document.createElement("div");
  div.className = "category new-cat";
  div.innerHTML = `
    <input class="temp-input" placeholder="Ïπ¥ÌÖåÍ≥†Î¶¨Î™Ö ÏûÖÎ†•" />
    <div class="actions">
      <button class="save-cat">üíæ</button>
    </div>
  `;

  sidebar.insertBefore(div, sidebar.querySelector("hr"));

  const input = div.querySelector("input");
  const saveBtn = div.querySelector(".save-cat");

  const save = () => {
    const value = input.value.trim();
    if (!value) return alert("Ïπ¥ÌÖåÍ≥†Î¶¨ Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");

    const exists = categoryOrder.some((c) => c.name === value);
    if (exists) return alert("Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî Ïπ¥ÌÖåÍ≥†Î¶¨ÏûÖÎãàÎã§.");

    const newCat = {
      id: uuid(), // ‚úÖ Í≥†Ïú† ID Î∂ÄÏó¨
      name: value,
    };

    setCategoryOrder([...getCategoryOrder(), newCat]);

    renderCategoryList();
    clipList.classList.add("hidden");
    clipContent.classList.add("hidden");
  };

  saveBtn.addEventListener("click", save);
  input.addEventListener("keypress", (e) => {
    if (e.key === "Enter") save();
  });

  input.focus();
});

// ‚úÖ ÏÉà ÌÅ¥Î¶Ω Ï∂îÍ∞Ä
document.querySelector(".add-clip").addEventListener("click", () => {
  if (!currentCategoryId) return alert("Ïπ¥ÌÖåÍ≥†Î¶¨Î•º Î®ºÏ†Ä ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.");

  const newClip = {
    id: uuid(), // ‚úÖ Í≥†Ïú† ID
    categoryId: currentCategoryId,
    title: "(Ï†úÎ™© ÏóÜÏùå)",
    content: "(ÎÇ¥Ïö© ÏóÜÏùå)",
    from: "(Ï∂úÏ≤ò ÏóÜÏùå)", // ‚úÖ Í∏∞Î≥∏Í∞í

    isFavorite: false,
  };

  // clipData.push(newClip);
  setClipData([...clipData, newClip]); // Î∞∞Ïó¥ÏùÑ ÏóÖÎç∞Ïù¥Ìä∏ Ìï®ÏàòÎ°ú ÎÑòÍπÄ
  renderClipList(currentCategoryId);
  renderClipContent(newClip);
});

// ‚≠ê Ï¶êÍ≤®Ï∞æÍ∏∞ ÌïÑÌÑ∞ ÌÜ†Í∏Ä
document.querySelector(".toggle-favorites").addEventListener("click", () => {
  toggleFavoritesOnly();

  const button = document.querySelector(".toggle-favorites");
  button.textContent = getShowFavoritesOnly()
    ? "‚≠ê Ï†ÑÏ≤¥ Î≥¥Í∏∞"
    : "‚≠ê Ï¶êÍ≤®Ï∞æÍ∏∞Îßå Î≥¥Í∏∞";

  if (currentCategoryId) {
    renderClipList(currentCategoryId);
  }
});

renderCategoryList();
document.querySelector(".clip-list").classList.add("hidden");
document.querySelector(".clip-content").classList.add("hidden");
